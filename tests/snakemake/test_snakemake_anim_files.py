#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# The MIT License
#
# Copyright (c) 2024-present University of Strathclyde
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
"""Test snakemake output for ANIm

These tests are intended to be run from the repository root using:

make test
"""

import shutil
import pytest

from pathlib import Path

from pyani_plus.snakemake import anim


def compare_files_with_skip(file1, file2, skip=1):
    """Compare two files, line by line, except for the first line.

    This function expects two text files as input and returns True if the content
    of the files is the same, and False if the two files differ.
    """

    with file1.open() as if1, file2.open() as if2:
        for line1, line2 in zip(
            if1.readlines()[skip:], if2.readlines()[skip:], strict=False
        ):
            if line1 != line2:
                return False
        return True


@pytest.fixture
def config_filter_args(anim_nucmer_targets_filter_outdir, input_genomes_small):
    """Configuration settings for running snakemake filter rule."""

    return {
        "outdir": anim_nucmer_targets_filter_outdir,
        "indir": input_genomes_small,
        "cores": 8,
        "mode": "mum",
    }


def test_compare_filter_files(
    anim_nucmer_targets_filter,
    anim_nucmer_expected_targets_filter,
    anim_nucmer_targets_filter_outdir,
    config_filter_args,
):
    """Test Snakemake filter output.

    This pytest verifies that the filter rule in the ANIm Snakemake wrapper
    generates filter files with the expected content. The verification is
    achieved by comparing the output returned by the Snakemake workflow with
    the expected output.

    Before comparing the outputs, any existing content generated by the Snakemake
    filter rule is removed, and the rule is re-run to ensure a clean environment
    and to avoid any interference from previous executions.
    """

    # Remove the output directory to force re-running the snakemake rule
    shutil.rmtree(anim_nucmer_targets_filter_outdir, ignore_errors=True)

    # Run snakemake wrapper
    anim.run_workflow(anim_nucmer_targets_filter, config_filter_args)

    for fname in anim_nucmer_expected_targets_filter.glob("*filter"):
        for fname2 in anim_nucmer_targets_filter_outdir.glob("*filter"):
            if str(fname.stem) == str(fname2.stem):
                assert compare_files_with_skip(fname, fname2) is True
